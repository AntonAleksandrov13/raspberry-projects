#- name: Check if Kubernetes is already initialized
#  ansible.builtin.stat:
#    path: /etc/kubernetes/admin.conf
#  register: kubeadm_config
#
#- name: Initialize Kubernetes cluster with kubeadm
#  become: true
#  ansible.builtin.shell: |
#    kubeadm init --control-plane-endpoint={{ main_node_static_ip }}
#  when: not kubeadm_config.stat.exists
#  register: kubeadm_init_output   # Register the output of the command
#
#- name: Get the IP address of eth0
#  shell: "ip -4 -br addr show eth0 | awk '{print $3}' | cut -d/ -f1"
#  register: eth0_ip
#  become: yes
#
#- name: Ensure the line with KUBELET_KUBEADM_ARGS is present
#  lineinfile:
#    path: /var/lib/kubelet/kubeadm-flags.env
#    regexp: '^KUBELET_KUBEADM_ARGS='
#    line: 'KUBELET_KUBEADM_ARGS="--container-runtime-endpoint=unix:///var/run/containerd/containerd.sock --node-ip={{ eth0_ip.stdout }} --pod-infra-container-image=registry.k8s.io/pause:3.10"'
#    create: yes
#  become: yes
#
#- name: Restart kubelet service
#  service:
#    name: kubelet
#    state: restarted
#  become: yes
#
#- name: Display kubeadm init output
#  ansible.builtin.debug:
#    msg: "{{ kubeadm_init_output.stdout }}"
#  when: not kubeadm_config.stat.exists
#
#- name: Create .kube directory in the user's home
#  ansible.builtin.file:
#    path: "{{ ansible_env.HOME }}/.kube"
#    state: directory
#    mode: '0755'
#
#- name: Copy Kubernetes admin.conf to user's .kube directory
#  become: yes
#  ansible.builtin.copy:
#    src: /etc/kubernetes/admin.conf
#    dest: "/home/anton/.kube/config"
#    owner: "1000"
#    group: "1000"
#    mode: '0644'
#    remote_src: yes
#    force: true
#
#- name: Download Helm signing key and add to keyrings
#  become: yes
#  shell: curl https://baltocdn.com/helm/signing.asc | gpg --dearmor | sudo tee /usr/share/keyrings/helm.gpg > /dev/null
#
#- name: Add Helm repository to APT sources
#  become: yes
#  shell: echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
#
#- name: Update APT package index
#  become: yes
#  apt:
#    update_cache: yes
#
#- name: Install Helm
#  become: yes
#  apt:
#    name: helm
#    state: present
#
#- name: Add Cilium Helm repository
#  shell: helm repo add cilium https://helm.cilium.io/
#  args:
#    executable: /bin/bash
#
#- name: Update Helm repositories
#  shell: helm repo update
#  args:
#    executable: /bin/bash
#
#- name: Get the latest Cilium CLI version
#  shell: CILIUM_CLI_VERSION=$(curl -s https://raw.githubusercontent.com/cilium/cilium-cli/main/stable.txt) && echo $CILIUM_CLI_VERSION
#  register: cilium_cli_version
#  become: yes
#
#- name: Determine CLI architecture
#  set_fact:
#    cli_arch: "{{ 'arm64' if ansible_architecture == 'aarch64' else 'amd64' }}"
#
#- name: Download Cilium CLI and checksum files
#  shell: |
#    curl -L --fail --remote-name-all https://github.com/cilium/cilium-cli/releases/download/{{ cilium_cli_version.stdout }}/cilium-linux-{{ cli_arch }}.tar.gz{,.sha256sum}
#  become: yes
#
#- name: Verify SHA256 checksum
#  shell: sha256sum --check cilium-linux-{{ cli_arch }}.tar.gz.sha256sum
#
#- name: Extract Cilium CLI to /usr/local/bin
#  shell: tar xzvfC cilium-linux-{{ cli_arch }}.tar.gz /usr/local/bin
#  become: yes
#
#- name: Clean up downloaded files
#  file:
#    state: absent
#    path: "{{ item }}"
#  with_items:
#    - cilium-linux-{{ cli_arch }}.tar.gz
#    - cilium-linux-{{ cli_arch }}.tar.gz.sha256sum
#
#- name: Add the Helm repository for Jetstack
#  shell: |
#    helm repo add jetstack https://charts.jetstack.io
#    helm repo update
#
#- name: Install Cert-Manager
#  shell: |
#    helm upgrade --install cert-manager jetstack/cert-manager \
#    --namespace cert-manager \
#    --create-namespace \
#    --version v1.16.2 \
#    --set crds.enabled=true
#
#

- name: Install Cilium using Helm
  shell: >
    helm upgrade --install cilium cilium/cilium --version 1.15.6
    --namespace kube-system
    --set k8sServiceHost={{ main_node_static_ip }}
    --set k8sServicePort=6443
    --set encryption.type=wireguard
    --set ingressController.enabled=true
    --set ingressController.loadbalancerMode=dedicated
    --set hubble.relay.enabled=true
    --set hubble.ui.enabled=true
    --set hubble.tls.auto.enabled=true              
    --set hubble.tls.auto.method=helm               
    --set hubble.tls.auto.certValidityDuration=1095
    --set cni.binPath=/usr/lib/cni
  args:
    executable: /bin/bash
